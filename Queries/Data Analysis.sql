USE BikeStores;

/* 1. Staff Productivity:

Identify the top-performing staff in terms of the total sales amount.*/

SELECT CONCAT(st.First_Name, ' ', st.Last_Name) AS Name, FORMAT(SUM(oi.Quantity*oi.List_Price),'C','en_US') AS Sales, s.Store_Name
FROM Sales.Staffs AS st
LEFT JOIN Sales.Orders AS o ON st.Staff_ID = o.Staff_ID
LEFT JOIN Sales.Order_Items AS oi ON o.Order_ID = oi.Order_ID
JOIN Sales.Stores AS s ON st.Store_ID = s.Store_ID
WHERE o.Order_Status = 4
GROUP BY st.Staff_ID, CONCAT(st.First_Name, ' ', st.Last_Name), s.Store_Name
ORDER BY SUM(oi.Quantity*oi.List_Price) DESC;

/* 2. Product Category Insights:

Which product category contributes the most to overall revenue?.*/


SELECT c.Category_Name, FORMAT(SUM(oi.Quantity*oi.List_Price),'C','en_US') AS Total_Revenue
FROM Production.Categories AS c
LEFT JOIN Production.Products AS p ON c.Category_ID = p.Category_ID
LEFT JOIN Sales.Order_Items AS oi ON p.Product_ID = oi.Product_ID
LEFT JOIN Sales.Orders AS o ON o.Order_ID =oi.Order_ID
WHERE o.Order_ID = 4
GROUP BY c.Category_ID, c.Category_Name
ORDER BY SUM(oi.Quantity*oi.List_Price) DESC;

/* 3. Brand Loyalty Analysis:

Determine the customer loyalty to specific brands by analyzing the repeat purchase rate for each brand.*/

WITH BrandRepeatCust AS (
	SELECT b.Brand_ID,b.Brand_Name, c.Customer_ID, COUNT(*) AS Order_Count
	FROM Sales.Customers AS c
	JOIN Sales.Orders AS o ON c.Customer_ID = o.Customer_ID
	JOIN Sales.Order_Items AS oi ON o.Order_ID = oi.Order_ID
	JOIN Production.Products AS p ON oi.Product_ID = p.Product_ID
	JOIN Production.Brands AS b ON p.Brand_ID = b.Brand_ID
	WHERE o.order_Status = 4
	GROUP BY b.Brand_ID, b.Brand_Name, c.Customer_ID
	HAVING COUNT(o.order_ID) > 1
)

SELECT brc.Brand_Name, COUNT(DISTINCT brc.Customer_ID) AS Repeat_Customer_Count, COUNT(DISTINCT o.customer_ID) AS Total_Customer_Count,
	ROUND(CAST(COUNT(DISTINCT brc.Customer_ID)*100.0/COUNT(DISTINCT o.customer_ID) AS FLOAT),2) AS Repeat_Purchase_Rate
FROM BrandRepeatCust AS brc
JOIN Production.products AS p ON brc.Brand_ID = p.Brand_ID
JOIN Sales.Order_Items AS oi ON p.Product_ID = oi.Product_ID
JOIN Sales.Orders AS o ON o.Order_ID = oi.Order_ID
WHERE o.Order_Status = 4
GROUP BY brc.Brand_ID, brc.Brand_Name
ORDER BY Repeat_Purchase_Rate DESC;

/* 4. Order Delivery Analysis:

Calculate the average delivery status for each city*/

SELECT c.City, 
	CASE WHEN AVG(CAST(DATEDIFF(Day,o.Shipped_Date, o.Required_Date)AS FLOAT)) < 0 THEN 'Delay'
	WHEN AVG(CAST(DATEDIFF(Day,o.Shipped_Date, o.Required_Date)AS FLOAT)) = 0 THEN 'On Time'
	WHEN AVG(CAST(DATEDIFF(Day,o.Shipped_Date, o.Required_Date)AS FLOAT)) > 0 THEN 'Early' END AS Avg_Delivery_Status
FROM Sales.Orders AS o
JOIN Sales.Customers AS c ON o.Customer_ID = c.Customer_ID
WHERE o.Order_Status = 4
GROUP BY c.City
ORDER BY c.City;

/* 5.Store Performance Analysis:

What is the Total revenue generated by each store in the 2017?*/

WITH Store_Revenue AS (
	SELECT s.Store_Name, MONTH(o.Order_Date) AS Month, SUM(oi.Quantity*oi.List_Price) AS Revenue
	FROM Sales.Stores AS s
	LEFT JOIN Sales.Orders AS o ON s.Store_ID = o.Store_ID
	LEFT JOIN Sales.Order_Items AS oi ON o.Order_ID = oi.Order_ID
	WHERE YEAR(o.Order_Date) = 2017 AND o.Order_Status = 4
	GROUP BY s.Store_ID, s.Store_Name, MONTH(o.Order_Date)
)

SELECT Store_Name, Month, FORMAT(Revenue, 'C', 'EN_US') AS Monthly_Revenue, FORMAT(SUM(Revenue) OVER(PARTITION BY Store_Name ORDER BY Month), 'C', 'EN_US') AS Running_Total
FROM Store_Revenue
ORDER BY Store_Name, Month

/* 6. Managerial Hierarchy Overview:

Provide an organizational hierarchy overview by displaying the management structure, including store managers and their direct reports.*/

WITH Managerial_Hierarchy AS (
	SELECT s.Staff_ID, CONCAT(s.First_Name,' ',s.Last_Name) AS Staff_Name, s.Email AS Staff_Email, s.Manager_ID, 0 AS Level, CAST(CONCAT(s.First_Name,' ',s.Last_Name) AS VARCHAR(MAX)) AS Path
	FROM Sales.Staffs AS s
	WHERE s.Manager_ID IS NULL

	UNION ALL

	SELECT st.Staff_ID, CONCAT(st.First_Name,' ',st.Last_Name) AS Staff_Name, st.Email AS Staff_Email, st.Manager_ID, mh.Level + 1 AS Level, CAST(CONCAT(mh.Path,' > ',CONCAT(st.First_Name,' ',st.Last_Name)) AS VARCHAR(MAX)) AS Path
	FROM Sales.Staffs AS st
	JOIN Managerial_Hierarchy AS mh ON st.Manager_ID = mh.Staff_ID
)

SELECT mh.Staff_ID, mh.Staff_Name, mh.Staff_Email, mh.Manager_ID, 
	CASE WHEN mh.Manager_ID iS NULL THEN NULL
	ELSE CONCAT(s.First_Name,' ',s.Last_Name) END AS Manager_Name, s.Email AS Manager_Email, mh.Level, mh.Path
FROM Managerial_Hierarchy AS mh
LEFT JOIN Sales.Staffs AS s ON mh.Manager_ID = s.Staff_ID
ORDER BY mh.Staff_ID